/*
 * ZIQNI Webhook Services
 * Webhook subscriber services intended use is to assist in the creation of a subscriber service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.webhook.api;

import com.ziqni.webhook.ApiClient;
import com.ziqni.webhook.ApiException;
import com.ziqni.webhook.ApiResponse;
import com.ziqni.webhook.Pair;

import com.ziqni.webhook.model.Response;
import com.ziqni.webhook.model.WebhookRequestBody;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WebhooksApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public WebhooksApi() {
    this(new ApiClient());
  }

  public WebhooksApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Handle notifications
   * Example server implementation used to subscribe to webhooks
   * @param acceptEncoding gzip (optional, default to gzip)
   * @param userAgent Strating ZIQNI/1.0.0 (optional, default to ZIQNI/1.0)
   * @param xAccount Unique identifier of your account (optional)
   * @param xOnEvent depending which webhook you are selecting (optional)
   * @param xEvent Event type code (optional)
   * @param xWebhookId The identifier of this webhook  (optional)
   * @param body Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> onWebhook(String acceptEncoding, String userAgent, String xAccount, String xOnEvent, String xEvent, String xWebhookId, WebhookRequestBody body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = onWebhookRequestBuilder(acceptEncoding, userAgent, xAccount, xOnEvent, xEvent, xWebhookId, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("onWebhook", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Handle notifications
   * Example server implementation used to subscribe to webhooks
   * @param acceptEncoding gzip (optional, default to gzip)
   * @param userAgent Strating ZIQNI/1.0.0 (optional, default to ZIQNI/1.0)
   * @param xAccount Unique identifier of your account (optional)
   * @param xOnEvent depending which webhook you are selecting (optional)
   * @param xEvent Event type code (optional)
   * @param xWebhookId The identifier of this webhook  (optional)
   * @param body Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> onWebhookWithHttpInfo(String acceptEncoding, String userAgent, String xAccount, String xOnEvent, String xEvent, String xWebhookId, WebhookRequestBody body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = onWebhookRequestBuilder(acceptEncoding, userAgent, xAccount, xOnEvent, xEvent, xWebhookId, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("onWebhook", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder onWebhookRequestBuilder(String acceptEncoding, String userAgent, String xAccount, String xOnEvent, String xEvent, String xWebhookId, WebhookRequestBody body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ziqni/webhook";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (acceptEncoding != null) {
      localVarRequestBuilder.header("Accept-Encoding", acceptEncoding.toString());
    }
    if (userAgent != null) {
      localVarRequestBuilder.header("User-Agent", userAgent.toString());
    }
    if (xAccount != null) {
      localVarRequestBuilder.header("X-Account", xAccount.toString());
    }
    if (xOnEvent != null) {
      localVarRequestBuilder.header("X-OnEvent", xOnEvent.toString());
    }
    if (xEvent != null) {
      localVarRequestBuilder.header("X-Event", xEvent.toString());
    }
    if (xWebhookId != null) {
      localVarRequestBuilder.header("X-WebhookId", xWebhookId.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
